// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String?         @unique
  verifiedEmail Boolean         @default(false)
  password      String?
  githubId      Int?            @unique
  name          String?
  avatar_url    String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  hookSessions  HookSession[]
  UserProject   ProjectMember[]

  @@index([email])
  @@index([githubId])
}

model HookSession {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  name           String?
  allowedHeaders String[]
  HookEvent      HookEvent[]
  User           User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
}

model HookEvent {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  session       HookSession  @relation(fields: [sessionId], references: [id])
  sessionId     String
  path          String
  body          Json
  headers       Json
  method        String
  query         Json
  hostname      String
  ProjectHook   ProjectHook? @relation(fields: [projectHookId], references: [id])
  projectHookId Int?
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  members     ProjectMember[]
  ProjectHook ProjectHook[]
}

model ProjectMember {
  id        Int         @id @default(autoincrement())
  userId    String
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  role      ProjectRole @default(MEMBER)

  @@unique([userId, projectId], name: "userProjectUnique")
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

model ProjectHook {
  id          Int         @id @default(autoincrement())
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  route       String
  method      String
  headers     Json
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  hookEvents  HookEvent[]
}
